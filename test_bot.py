from exchange_api import ExchangeAPI
from backtester import Backtester
from visualizer import TradingVisualizer
from config import SYMBOLS, TIMEFRAMES, RISK_PARAMS
import pandas as pd

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    api = ExchangeAPI()
    
    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ—Å—Ç–∞
    symbol = SYMBOLS[1]    # BTC/USDT
    timeframe = TIMEFRAMES[1]  # 4h
    
    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol} ({timeframe})...")
    data = api.fetch_ohlcv(symbol, timeframe)
    
    if not data:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞...")
    backtester = Backtester(data)
    report = backtester.run_backtest(required_conditions=0)
    
    if report.empty:
        print("\nüìä –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å")
    else:
        print("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏:")
        print(report[['entry_time', 'entry_price', 'exit_price', 'profit']])
        print(f"\nüíµ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${backtester.current_balance:.2f}")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    visualizer = TradingVisualizer(data)
    
    try:
        visualizer.plot_full_analysis(
            trades=backtester.trade_history,
            filepath='trading_analysis.png'
        )
        print("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ trading_analysis.png")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()